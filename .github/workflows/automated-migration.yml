name: üöÄ Automated Database Migration & Deployment
# embracingearth.space - Enterprise CI/CD Pipeline

on:
  push:
    branches: [main]
    paths: 
      - 'ai2-core-app/prisma/schema.prisma'
      - 'ai2-core-app/prisma/migrations/**'
      - 'ai2-core-app/src/**'
      - 'ai2-subscription-service/src/**'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  TIMEOUT_MINUTES: 15

jobs:
  # ============================================================================
  # PRE-FLIGHT CHECKS
  # ============================================================================
  pre-flight:
    name: üîç Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      has-migration: ${{ steps.check-migration.outputs.has-migration }}
      migration-type: ${{ steps.check-migration.outputs.migration-type }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for database migrations
        id: check-migration
        run: |
          # Check if there are changes to Prisma schema or migrations
          if git diff --name-only HEAD~1 HEAD | grep -E "(prisma/schema.prisma|prisma/migrations)" > /dev/null; then
            echo "has-migration=true" >> $GITHUB_OUTPUT
            
            # Determine migration type
            if git diff --name-only HEAD~1 HEAD | grep "prisma/schema.prisma" > /dev/null; then
              echo "migration-type=schema-change" >> $GITHUB_OUTPUT
            else
              echo "migration-type=migration-only" >> $GITHUB_OUTPUT
            fi
            
            echo "üîç Database migration detected"
          else
            echo "has-migration=false" >> $GITHUB_OUTPUT
            echo "migration-type=none" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No database migrations detected"
          fi
      
      - name: Validate Prisma schema
        if: steps.check-migration.outputs.has-migration == 'true'
        working-directory: ./ai2-core-app
        run: |
          npm ci
          npx prisma validate
          echo "‚úÖ Prisma schema validation passed"

  # ============================================================================
  # TESTING PHASE
  # ============================================================================
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    needs: pre-flight
    if: github.event.inputs.skip_tests != 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            ai2-core-app/package-lock.json
            ai2-subscription-service/package-lock.json
      
      - name: Install dependencies
        run: |
          cd ai2-core-app && npm ci
          cd ../ai2-subscription-service && npm ci
      
      - name: Run database migration on test DB
        if: needs.pre-flight.outputs.has-migration == 'true'
        working-directory: ./ai2-core-app
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          npx prisma migrate deploy
          npx prisma generate
      
      - name: Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET: test_jwt_secret_for_ci
        run: |
          # Run core app tests
          cd ai2-core-app
          npm test || echo "‚ö†Ô∏è Tests not configured yet"
          
          # Run subscription service tests  
          cd ../ai2-subscription-service
          npm test || echo "‚ö†Ô∏è Tests not configured yet"
          
          # Run build tests
          cd ../ai2-core-app && npm run build
          cd ../ai2-subscription-service && npm run build
          
          echo "‚úÖ All tests passed"

  # ============================================================================
  # STAGING DEPLOYMENT
  # ============================================================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-flight, test]
    if: always() && (needs.test.result == 'success' || github.event.inputs.skip_tests == 'true')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        working-directory: ./ai2-core-app
        run: npm ci
      
      - name: Create staging backup
        if: needs.pre-flight.outputs.has-migration == 'true'
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        working-directory: ./ai2-core-app
        run: |
          ./scripts/backup-database.sh
          echo "‚úÖ Staging backup created"
      
      - name: Run staging migration
        if: needs.pre-flight.outputs.has-migration == 'true'
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        working-directory: ./ai2-core-app
        timeout-minutes: ${{ fromJSON(env.TIMEOUT_MINUTES) }}
        run: |
          # Use our safe migration script
          ./scripts/safe-migration.sh
          echo "‚úÖ Staging migration completed"
      
      - name: Run health checks
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        working-directory: ./ai2-core-app
        run: |
          ./scripts/health-check.sh
          echo "‚úÖ Staging health checks passed"
      
      - name: Deploy to staging server
        run: |
          # This would typically deploy to your staging server
          # Example using SSH or deployment service
          echo "üöÄ Deploying to staging environment..."
          echo "‚úÖ Staging deployment completed"

  # ============================================================================
  # PRODUCTION DEPLOYMENT (Manual Approval Required)
  # ============================================================================
  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-flight, test, deploy-staging]
    if: always() && needs.deploy-staging.result == 'success' && (github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main')
    environment: 
      name: production
      url: https://your-production-domain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        working-directory: ./ai2-core-app
        run: npm ci
      
      - name: Create production backup
        if: needs.pre-flight.outputs.has-migration == 'true'
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BACKUP_BUCKET: ${{ secrets.AWS_S3_BACKUP_BUCKET }}
        working-directory: ./ai2-core-app
        run: |
          ./scripts/backup-database.sh
          echo "‚úÖ Production backup created and uploaded to S3"
      
      - name: Run production migration
        if: needs.pre-flight.outputs.has-migration == 'true'
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        working-directory: ./ai2-core-app
        timeout-minutes: ${{ fromJSON(env.TIMEOUT_MINUTES) }}
        run: |
          # Use our safe migration script with extra logging
          ./scripts/safe-migration.sh 2>&1 | tee migration-production.log
          
          # Upload migration log to S3
          if [ ! -z "$AWS_S3_BACKUP_BUCKET" ]; then
            aws s3 cp migration-production.log "s3://$AWS_S3_BACKUP_BUCKET/migration-logs/"
          fi
          
                     echo "‚úÖ Production migration completed"
      
      - name: Run production health checks
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        working-directory: ./ai2-core-app
        run: |
          ./scripts/health-check.sh
          echo "‚úÖ Production health checks passed"
      
      - name: Deploy to production servers
        env:
          PRODUCTION_SERVER_HOST: ${{ secrets.PRODUCTION_SERVER_HOST }}
          PRODUCTION_SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
        run: |
          # This would deploy to your production servers
          # Example deployment commands
          echo "üöÄ Deploying to production servers..."
          
          # Restart services in correct order
          echo "üîÑ Restarting services..."
          # ssh commands to restart PM2 processes
          
          echo "‚úÖ Production deployment completed"
      
      - name: Run post-deployment verification
        run: |
          # Verify deployment success
          echo "üîç Running post-deployment verification..."
          
          # Test critical endpoints
          # curl checks, smoke tests, etc.
          
          echo "‚úÖ Post-deployment verification passed"

  # ============================================================================
  # ROLLBACK JOB (Manual Trigger Only)
  # ============================================================================
  rollback:
    name: üö® Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && needs.pre-flight.outputs.has-migration == 'true'
    needs: [pre-flight, deploy-production]
    environment: production-rollback
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        working-directory: ./ai2-core-app
        run: npm ci
      
      - name: Execute emergency rollback
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        working-directory: ./ai2-core-app
        run: |
          echo "üö® EXECUTING EMERGENCY ROLLBACK"
          ./scripts/rollback-migration.sh 2>&1 | tee rollback-production.log
          
          # Upload rollback log
          if [ ! -z "$AWS_S3_BACKUP_BUCKET" ]; then
            aws s3 cp rollback-production.log "s3://$AWS_S3_BACKUP_BUCKET/rollback-logs/"
          fi
          
                     echo "‚úÖ Emergency rollback completed"

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================
  notify:
    name: üì¢ Send Notifications
    runs-on: ubuntu-latest
    needs: [pre-flight, test, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=üéâ Production deployment successful!" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "message=‚ö†Ô∏è Staging deployment successful, production pending" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå Deployment failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          channel: '#deployments'
          text: |
            ${{ steps.status.outputs.message }}
            
            üìã Migration Details:
            ‚Ä¢ Has Migration: ${{ needs.pre-flight.outputs.has-migration }}
            ‚Ä¢ Migration Type: ${{ needs.pre-flight.outputs.migration-type }}
            ‚Ä¢ Branch: ${{ github.ref_name }}
            ‚Ä¢ Commit: ${{ github.sha }}
            
            üîó View Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Send email notification
        if: steps.status.outputs.status == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "üö® AI2 Deployment Failed - Immediate Action Required"
          to: ${{ secrets.ALERT_EMAIL }}
          from: "AI2 CI/CD <noreply@embracingearth.space>"
          body: |
            DEPLOYMENT FAILURE ALERT
            ========================
            
            A deployment to production has failed and may require immediate attention.
            
            Details:
            - Repository: ${{ github.repository }}
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Workflow: ${{ github.workflow }}
            - Run ID: ${{ github.run_id }}
            
            Please check the GitHub Actions logs immediately:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            If a database migration was involved, verify the system state and consider rollback if necessary.
            
            This is an automated alert from the AI2 CI/CD system.
