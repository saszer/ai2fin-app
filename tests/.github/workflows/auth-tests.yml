name: AI2 Authentication Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  auth-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ai2
          POSTGRES_USER: aifin_user
          POSTGRES_DB: aifin
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install backend dependencies
      run: |
        cd ai2-core-app
        npm ci

    - name: Setup database
      run: |
        cd ai2-core-app
        npx prisma db push
      env:
        DATABASE_URL: postgresql://aifin_user:ai2@localhost:5434/aifin

    - name: Start backend server
      run: |
        cd ai2-core-app
        npm start &
        sleep 10
      env:
        DATABASE_URL: postgresql://aifin_user:ai2@localhost:5434/aifin
        JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-for-ci-cd-embracingearth-space' }}
        OIDC_ISSUER: ${{ secrets.OIDC_ISSUER }}
        OIDC_AUDIENCE: ${{ secrets.OIDC_AUDIENCE }}
        NODE_ENV: test
        PORT: 3001

    - name: Wait for server to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 1; done'

    - name: Create test user
      run: |
        curl -X POST http://localhost:3001/api/oidc/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@embracingearth.space","password":"TestPass123!","firstName":"Test","lastName":"User"}'

    - name: Install test dependencies
      run: |
        cd tests
        npm install

    - name: Run authentication tests
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-for-ci-cd-embracingearth-space' }}
        TEST_BASE_URL: http://localhost:3001
        TEST_USER_EMAIL: test@embracingearth.space
        TEST_USER_PASSWORD: TestPass123!
      run: |
        cd tests
        npm run test:ci

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: auth-test-results
        path: |
          tests/test-report.*
          tests/auth-test-results.json
          tests/jwt-debug-results.json

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const report = fs.readFileSync('tests/test-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîê Authentication Test Results\n\n${report}`
            });
          } catch (error) {
            console.log('Could not read test report:', error);
          }

    - name: Fail if tests failed
      run: |
        cd tests
        if [ -f test-report.json ]; then
          status=$(cat test-report.json | jq -r '.summary.overallStatus')
          if [ "$status" != "PASSED" ]; then
            echo "Tests failed with status: $status"
            exit 1
          fi
        else
          echo "No test report found"
          exit 1
        fi


